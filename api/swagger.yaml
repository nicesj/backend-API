swagger: "2.0"
info:
  title: OpenAPI (REST)
  description: This is a API specification for [futuremobile.net](https://futuremobile.net)
  version: 0.0.1
host: futuremobile.net
basePath: /
schemes:
  - https
securityDefinitions: # https://swagger.io/docs/specification/2-0/authentication/
  OAuth2:
    type: oauth2 # basic, apiKey, oauth2
    flow: accessCode
    authorizationUrl: https://futuremobile.net/oauth2/authorize
    tokenUrl: https://futuremobile.net/oauth2/token
    scopes:
      userinfo.write: Grants write access for the user info
      userinfo.read: Grants read access for the user info
      userinfo.admin: Grants admin access for the user info
      storage.write: Grants write access for the storage
      storage.read: Grants read access for the storage
      storage.admin: Grants admin access for the storage
      admin: Grants admin access for all resources
  APIKeyAuth:
    type: apiKey
    in: header
    name: Authorization
paths:
  /rss:
    get:
      tags: 
        - SEO
      operationId: getRSS
      summary: Rich Site Summary
      description: Generate a Rich Site Summary document
      security: []
      produces:
        - application/xml+rss
        - text/plain
      responses:
        200:
          description: RSS document
          schema:
            $ref: "#/definitions/rss"
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error
  /storage/writeFile:
    post:
      tags:
        - Storage
      operationId: storageWriteFile
      summary: Upload files to the storage
      description: Upload multiple files into the given path (folder)
      security:
       - OAuth2: [storage.write]
       - OAuth2: [storage.admin]
       - OAuth2: [admin]
      consumes:
        - multipart/form-data
      produces:
        - application/json
      parameters:
        - in: formData
          name: folder
          type: string
          description: A folder (path) to upload files
        - in: formData # https://swagger.io/docs/specification/2-0/file-upload/
          name: files
          type: array
          items:
            type: string
            format: byte   # Should be binary
      responses:
        200:
          description: Status of file uploading
          schema:
            $ref: "#/definitions/storageResponse"
        400:
          description: Bad Request
        403:
          description: Forbidden
        500:
          description: Internal Server Error
  # https://github.com/go-swagger/go-swagger/issues/932
  /storage/readFile:
    get:
      tags:
        - Storage
      operationId: storageReadFile
      summary: Download a file
      description: Streaming a file contents to the client
      security:
       - OAuth2: [storage.read]
       - OAuth2: [storage.admin]
       - Oauth2: [admin]
      produces:
        - application/octect-stream
        - text/plain
      parameters:
        - in: query
          name: f
          type: string
          description: A file what would be transferred
      responses:
        200:
          description: download a file
          schema:
            type: file
        400:
          description: Bad Request
        403:
          description: Forbidden
  /storage/readFolder:
    get:
      tags:
        - Storage
      operationId: storageReadFolder
      summary: Get a list of files and folders
      description: Get a list of files and folders in a given path (folder)
      security:
       - OAuth2: [storage.read]
       - OAuth2: [storage.admin]
       - OAuth2: [admin]
      produces:
        - application/json
      parameters:
        - in: query
          name: r
          type: string
          description: A path of target folder
      responses:
        200:
          description: List of files or folders
          schema:
            $ref: "#/definitions/getStorageFolderResponse"
        400:
          description: Bad Request
        403:
          description: Forbidden
  /isUsed:
    head:
      tags:
        - User
      operationId: isUsed
      summary: Check whether the nickname or the id is duplicated
      description: Check whether the nickname or the id is duplicated
      security:
        - APIKeyAuth: []
        - OAuth2: [userinfo.read]
        - OAuth2: [userinfo.admin]
        - OAuth2: [admin]
      produces:
        - text/plain
      parameters:
        - in: query
          name: type
          type: string
          enum: [uid, nickname]
          description: |
            Type of checking value
              * uid - User ID
              * nickname - User Nickname
        - in: query
          name: value
          description: nickname or uid
          type: string
      responses:
        204:
          description: No Content
        400:
          description: Bad Request
        403:
          description: Forbidden
        409:
          description: Conflict
        500:
          description: Internal Server Error
  /userInfo:
    get:
      tags: 
        - User
      summary: Retrieve a user information
      description: Retrieve a user information
      operationId: getUserInfo
      security: []
      produces:
        - application/json
        - text/plain
      parameters:
        - in: query
          name: uid
          description: Command type
          type: string
      responses:
        200:
          description: profile image
          schema:
            $ref: "#/definitions/userInfoResponse"
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Internal Server Error
    post:
      tags:
        - User
      summary: Sign up A new user
      description: Sign up a new user with profile image, name, id, and so on...
      operationId: postUserInfo
      security:
        - OAuth2: [userinfo.write]
        - OAuth2: [userinfo.admin]
        - OAuth2: [admin]
      consumes:
        - multipart/form-data
      produces:
        - text/plain
      parameters:
        - in: formData
          name: profile_image
          type: string
          description: indicates the filename of profile image, if there is no uploaded file, this will be the path of default profile image
        - in: formData
          name: files
          type: file
          required: false
          description: file object of a profile image
        - in: formData
          name: phone
          type: string
          description: phone number
        - in: formData
          name: email
          type: string
          description: email address
        - in: formData
          name: uid
          type: string
          description: user id
        - in: formData
          name: nickname
          type: string
          description: user nickname
        - in: formData
          name: name
          type: string
          description: user name
        - in: formData
          name: password
          type: string
          description: user password
        - in: formData
          name: gender
          type: string
          description: user gender
        - in: formData
          name: perm
          type: string
          description: open scope for profile information
        - in: formData
          name: homepage
          type: string
          description: user homepage
        - in: formData
          name: birth
          type: string
          format: date
          description: user birthday
        - in: formData
          name: affiliation
          type: string
          description: user affiliation
      responses:
        201:
          description: Created
          schema:
            $ref: "#/definitions/created"
        400:
          description: Bad Request
        403:
          description: Forbidden
        500:
          description: Internal Server Error
    patch:
      tags:
        - User
      summary: Update a user information
      description: update a user information such as profile image, name, ID, and so on...
      operationId: updateUserInfo
      security:
        - OAuth2: [userinfo.write]
        - OAuth2: [userinfo.admin]
        - OAuth2: [admin]
      consumes:
        - multipart/form-data
      produces:
        - text/plain
      parameters:
        - in: formData
          name: profile_image
          type: string
          description: indicates the filename of profile image, if there is no uploaded file, this will be the path of default profile image
        - in: formData
          name: files
          type: file
          required: false
          description: file object of a profile image
        - in: formData
          name: phone
          type: string
          description: phone number
        - in: formData
          name: email
          type: string
          description: email address
        - in: formData
          name: uid
          type: string
          description: user id
        - in: formData
          name: nickname
          type: string
          description: user nickname
        - in: formData
          name: name
          type: string
          description: user name
        - in: formData
          name: password
          type: string
          description: user password
        - in: formData
          name: gender
          type: string
          description: user gender
        - in: formData
          name: perm
          type: string
          description: open scope for profile information
        - in: formData
          name: homepage
          type: string
          description: user homepage
        - in: formData
          name: birth
          type: string
          format: date
          description: user birthday
        - in: formData
          name: affiliation
          type: string
          description: user affiliation
      responses:
        200:
          description: ok
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Internal Server Error
  /userInfo/profile:
    get:
      tags: 
        - User
      summary: Retrieve user profile
      description: Retrieve user profile image
      operationId: getUserInfoProfile
      security: []
      produces:
        - application/octect-stream
        - text/plain
      parameters:
        - in: query
          name: uid
          description: user id
          type: string
      responses:
        200:
          description: profile image
          schema:
            type: file
        400:
          description: Bad Request
        403:
          description: Forbidden
        404:
          description: Not Found
        500:
          description: Internal Server Error
  /verify/user/getCode:
    post:
      tags:
        - Verify
      operationId: verifyUserGetCode
      summary: Get the code for verify a user
      description: In order to verify a user, send the code to the user via an email or a phone
      security: []
      produces:
        - application/json
        - text/plain
      consumes:
        - application/json
      parameters:
        - in: body
          name: verify
          schema:
            $ref: "#/definitions/verifyUserGetCodeParam"
      responses:
        200:
          description: ok
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /verify/user:
    post:
      tags:
        - Verify
      operationId: verifyUser
      summary: Verify a user
      description: Verify a user by the email address or the phone number
      security: []
      produces:
        - application/json
        - text/plain
      consumes:
        - application/json
      parameters:
        - in: body
          name: verify
          schema:
            $ref: "#/definitions/verifyUserParam"
      responses:
        200:
          description: ok
          schema:
            type: object
            required:
              - accessToken
            properties:
              accessToken:
                $ref: "#/definitions/accessToken"
        400:
          description: Bad Request
        500:
          description: Internal Server Error
  /verify/token:
    post:
      tags:
        - Verify
      operationId: verifyToken
      summary: Verify credentials
      description: Verify credentials, such as a token
      security:
        - OAuth2: [userinfo.read]
        - OAuth2: [storage.read]
        - OAuth2: [userinfo.admin]
        - OAuth2: [storage.admin]
        - OAuth2: [admin]
      produces:
        - application/json
        - text/plain
      consumes:
        - application/json
      parameters:
        - in: body
          name: verify
          schema:
            $ref: "#/definitions/verifyTokenParam"
      responses:
        200:
          description: ok
        400:
          description: Bad Request
        403:
          description: Forbidden
        409:
          description: Conflict
        500:
          description: Internal Server Error
  /signIn:
    post:
      tags:
        - User
      summary: Sign in to the service
      description: Sign In
      operationId: signIn
      security: []
      consumes:
        - application/json
      produces:
        - application/json
        - text/plain
      parameters:
        - in: body
          name: userCredential
          schema:
            $ref: "#/definitions/signInRequest"
      responses:
        200:
          description: Authorized user information
          schema:
            $ref: "#/definitions/signInResponse"
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error
  /search:
    post:
      tags:
        - Search
      operationId: doSearch
      summary: Search
      description: Search contents in a database
      security: []
      consumes:
        - application/json
      produces:
        - application/json
        - text/plain
      parameters:
        - in: body
          name: keyword
          description: Keywords to search contents
          schema:
            $ref: "#/definitions/searchRequest"
      responses:
        200:
          description: Result of search, response type is not specified yet
          schema:
            $ref: "#/definitions/searchResponse"
        400:
          description: Bad Request
        404:
          description: Not Found
        500:
          description: Internal Server Error
definitions:
  clientID:
    type: string
    description: Client ID
    example: 8604f84b-0c74-4fc8-8561-0e38dcc9ca56
  clientKey:
    type: string
    description: Client Key
    example: 8604f84b-0c74-4fc8-8561-0e38dcc9ca56
  accessToken:
    type: string
    description: Access token
    x-nullable: true
    example: TY7BcoIwFEW/SIdEhenSBqd9AR4jEoLsIDoYBMGhgPD1bbpye+fce+515rfiS+lQcxALENTQwyPaKQY23Ls0YfxjfZ15pzZIshQMOF0k73MZaJ9xksujyYZcYq1oa7LhLEkNVatthyUOnF6OxxToSWeS3HI5vfHdvmjqKkvx6Tc4Ficj/2wLuvvvB+5hQlctwVLOgVua7e6c/vmqA8FKWBjvKbqihybZmsNBLCjGR4IuWJha67B5jM/ajwhsXxu2imIvHld958vQ9gTtaYk/fFlm9j3ALw==
  notFound:
    type: string
    example: Not Found
  internalServerError:
    type: string
    example: Internal Server Error
  forbidden:
    type: string
    example: Forbidden
  badRequest:
    type: string
    example: Bad Request
  created:
    type: string
    example: Created
  conflict:
    type: string
    example: Conflict
  verifyTokenParam:
    type: object
    required:
      - clientKey
      - clientID
      - accessToken
    properties:
      clientKey:
        $ref: "#/definitions/clientKey"
      clientID:
        $ref: "#/definitions/clientID"
      accessToken:
        $ref: "#/definitions/accessToken"
  verifyUserGetCodeParam:
    type: object
    required:
      - type
      - value
    properties:
      type:
        type: string
        description: A type of value
        enum: [email, phone]
      value:
        type: string
        description: |
          * email - An email address (info@futuremobile.net)
          * phone - A phone number (+12-12-1234-1234)
  verifyUserParam:
    type: object
    required:
      - type
      - value
      - code
    properties:
      type:
        type: string
        description: A type of value
        enum: [email, phone]
      value:
        type: string
        description: |
          * email - An email address (info@futuremobile.net)
          * phone - A phone number (+12-12-1234-1234)
      code:
        type: string
        description: A verification code
  getStorageFolderResponse:
    type: object
    properties:
      root:
        type: string
        description: root folder
      files:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
              description: file or folder name
              example: hello.txt
            type:
              type: string
              enum: [d, f, s, e, dl, fl, sl, el]
              description: |
                type of an object,
                * d - folder
                * f - file
                * s - special
                * e - error
                if the target is a symbolic link, there would be a postfix "l"(L) for each type.
            size:
              type: number
              format: unit64
              description: filesize in bytes
            time:
              type: string
              format: date-time
              description: last modified time of the object
            mime:
              type: string
              description: mime type
  storageResponse:
    type: array
    items:
      type: object
      required:
        - status
      properties:
        root:
          type: string
          example: /image
          description: A path where the uploaded files are stored
          x-nullable: true
        filename:
          type: string
          example: myImage.jpg
          description: Uploaded filename
          x-nullable: true
        status:
          type: number
          example: 200
          description: Status of uploading file. [ 200, 400, 403, 500 ]
  userInfoResponse:
    type: object
    properties:
      email:
        type: string
        example: info@futuremobile.net
      name:
        type: string
        example: info
      gender:
        type: string
        example: male
      homepage:
        type: string
        example: https://futuremobile.net
  signInResponse:
    type: object
    required:
      - accessToken
      - refreshToken
      - createdAt
      - expiresIn
      - tokenType
    properties:
      accessToken:
        $ref: "#/definitions/accessToken"
      refreshToken:
        description: Refresh Token
        type: string
        example: TY7BcoIwFEW/SIdEhenSBqd9AR4jEoLsIDoYBMGhgPD1bbpye+fce+515rfiS+lQcxALENTQwyPaKQY23Ls0YfxjfZ15pzZIshQMOF0k73MZaJ9xksujyYZcYq1oa7LhLEkNVatthyUOnF6OxxToSWeS3HI5vfHdvmjqKkvx6Tc4Ficj/2wLuvvvB+5hQlctwVLOgVua7e6c/vmqA8FKWBjvKbqihybZmsNBLCjGR4IuWJha67B5jM/ajwhsXxu2imIvHld958vQ9gTtaYk/fFlm9j3ALw==
      createdAt:
        description: When the authorized information is created
        type: string
        example: 2019-07-15 23:15:18
      expiresIn:
        description: Valid until given datetime
        type: string
        example: 2019-07-15 23:15:18
      tokenType:
        description: A method for validating a token
        type: string
        example: bearer
  signInRequest:
    type: object
    required:
      - clientID
      - clientKey
      - ID
      - password
    properties:
      clientID:
        $ref: "#/definitions/clientID"
      clientKey:
        $ref: "#/definitions/clientKey"
      ID:
        description: User ID
        type: string
        example: info
      password:
        description: User Password
        type: string
        format: password
        example: password
  searchResponse:
    type: object
    properties:
      clientID:
        $ref: "#/definitions/clientID"
      clientKey:
        $ref: "#/definitions/clientKey"
  searchRequest:
    type: object
    required:
      - keyword
      - clientID
      - clientKey
    properties:
      keyword:
        description: Keywords for searching contents
        type: string
        example: hello
      clientID:
        $ref: "#/definitions/clientID"
      clientKey:
        $ref: "#/definitions/clientKey"
      accessToken:
        $ref: "#/definitions/accessToken"
  rss:
    type: object
    properties:
      rdf:
        xml:
          namespace: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'
          attribute: true
      dc:
        xml:
          namespace: 'http://purl.org/dc/elements/1.1'
          attribute: true
      taxo:
        xml:
          namespace: 'http://purl.org/rss/1.0/modules/taxonomy/'
          attribute: true
      atom:
        xml:
          namespace: 'http://www.w3.org/2005/Atom'
          attribute: true
      activity:
        xml:
          namespace: 'http://activitystrea.ms/spec/1.0/'
          attribute: true
      channel:
        type: object
        properties:
          title:
            type: string
            example: RSS of futuremobile.net
          link:
            type: string
            example: https://futuremobile.net
          description:
            type: string
            example: <![CDATA[Software]]>
          generator:
            type: string
            example: futuremobile.net
          webMaster:
            type: string
            example: info@futuremobile.net
          ttl:
            type: number
            format: uint64
            example: 100
          image:
            type: object
            properties:
              url:
                type: string
                example: <![CDATA[https://futuremobile.net/site.png]]>
              title:
                type: string
                example: futuremobile.net
              link:
                type: string
                example: https://futuremobile.net
          language:
            type: string
            example: ko-KR
          pubDate:
            type: string
            example: Sat, 10 Aug 2019 17:38:23 +0900
          link:
            type: object
            xml:
              prefix: 'atom'
            properties:
              href:
                type: string
                xml:
                  attribute: true
                example: https://futuremobile.net/rss
              rel:
                type: string
                xml:
                  attribute: true
                example: self
              type:
                type: string
                xml:
                  attribute: true
                example: application/rss+xml
          item:
            type: array
            items:
              type: object
              properties:
                guid:
                  type: object
                  properties:
                    isPermaLink:
                      type: boolean
                      xml:
                        attribute: true
                      example: true
                    value:
                      type: string
                      xml:
                        wrapped: false
                      example: https://futuremobile.net/bulletin/1
                title:
                  type: string
                  example: Example of a text in the bulletin board
                link:
                  type: string
                  example: https://futuremobile.net/bulletin/1
                description:
                  type: string
                  example: <![CDATA[Retrieved contents]]>
                author:
                  type: string
                  example: info
                category:
                  type: string
                  example: example
                pubDate:
                  type: string
                  example: Fri, 23 Nov 2018 12:19:00 +0900
                tag:
                  type: string
                  example: <![CDATA[example,bulletin,swagger]]>
                verb:
                  type: string
                  xml:
                    prefix: 'activity'
                  example: http://activitystrea.ms/schema/1.0/post
                object-type:
                  type: string
                  xml:
                    prefix: 'activity'
                  example: http://activitystrea.ms/schema/1.0/blog-entry
